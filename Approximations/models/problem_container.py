from Approximations.models.data_models.R_matrix_full import R_Matrix_Full
from Approximations.models.fitting_models.reich_moore_model import Reich_Moore
from Approximations.models.fitting_models.gamma_SVD_model import Gamma_SVD
from Approximations.tools.fitting import gradientDescent
from Approximations.tools.fitting import levenbergMarquardt






class problem():
    data_model_formats = [R_Matrix_Full]
    fit_model_formats  = [Reich_Moore,
                          Gamma_SVD]
    fitting_algorithms = [gradientDescent,
                          levenbergMarquardt]

    def __init__(self,
                 molecular_information,
                 interaction_information,
                 model_information,
                 fitting_parameters,
                 selections):
        # molecular_information:   Incident Name
        #                          Incident Protons
        #                          Incident Nucleons
        #                          departing Name
        #                          departing Protons
        #                          departing Nucleons
        #                          Compound Name
        #                          Compound Protons
        #                          Compound Nucleons
        #
        # interaction_information: Separation Energy
        #                          Gamma Variance
        #                          Neutron Variance
        #                          Excited States
        #                          Number Levels
        #                          Resonance Levels
        #                          ↳ Generated by...
        #                             Resonance Distance
        #                             Resonance Average Spacing
        #
        # model_information:       Energy Grid
        #                          ↳ Generated by...
        #                             Energy Grid Range
        #                             Energy Grid Buffer
        #
        # fitting_parameters:      Depends on algorithm choice
        #
        # selections:              Data Model
        #                              1: Complete R-Matrix
        #                          Fit Model
        #                              1: Reich Moore
        #                              2: SVD
        #                          Fit Method
        #                              1: Built in gradient descent
        #                              2: Built in Levenburg-Marquardt

        self.molecular_information   = molecular_information
        self.interaction_information = interaction_information
        self.model_information       = model_information
        self.fit_parameters          = fitting_parameters
        self.selections              = selections

        self.data_model = self.formModel(self.data_model_formats,
                                         self.selections["Data Model"])
        self.fit_model  = self.formModel(self.data_model_formats,
                                         self.selections["Fit Model"])

        self.fit_call = self.formFitCall(self.fitting_algorithms,
                                         self.selections["Fit Method"])

    

    def formModel(self,
                   model_formats,
                   model_selection):
        model = model_formats[model_selection-1]
        return(model(self.molecular_information,
                     self.interaction_information,
                     self.model_information))
    


    def formFitCall(self,
                      fitting_algorithms,
                      algorithm_choice):
        fitting_alg = fitting_algorithms[algorithm_choice-1]
        return(fitting_alg(self.fit_model,
                           self.fitting_parameters,
                           0))



    def generateData(self):
        self.data=self.data_model.generateData()
    


    def sampleInformation(self):
        if((not("Resonance Levels"          in self.interaction_information)) and   
               ("Resonance Distance"        in self.interaction_information)  and
               ("Resonance Average Spacing" in self.interaction_information)):
            assert "Number Levels"   in interaction_information, "Information Gen Failed: Number Levels not provided in interaction_information"
            levels=np.zeros(self.interaction_information["Number Levels"])
            levels[0]=self.interaction_information["Resonance Distance"]
            for idx in range(1,self.interaction_information["Number Levels"]):
                levels[idx]=distributions.sample_wigner_invCDF()*self.interaction_information["Resonance Average Spacing"]+levels[idx-1]
            self.interaction_information["Resonance Levels"]=levels

        if((not("Energy Grid"        in self.model_information)) and
               ("Energy Grid Range"  in self.model_information)  and
               ("Energy Grid Buffer" in self.model_information)):
           assert "Resonance Levels"   in interaction_information, "Information Gen Failed: Resonance Levels not provided in interaction_information"
           self.model_information["Energy Grid"]=np.linspace(self.interaction_information["Resonance Levels"][0]-energy_grid_buffer,
                                                             self.interaction_information["Resonance Levels"][-1]+energy_grid_buffer,
                                                             energy_grid_size)